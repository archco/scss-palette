//==========================================================
// scss-palette functions
//==========================================================
// scss-lint:disable ColorVariable

$palette-brightness-point: 165 !default; // 65%

// get color from palette
//
// @param  string $name
// @param  color  $default default color
// @return color
@function palette($name, $default: null) {
  $name: to-lower-case($name);
  $color: map-get($palette, $name);
  @if $color == null {
    @if $default != null {
      @return $default;
    } @else {
      @warn "#{$name} color is not exist in color-maps.";
      @return $default;
    }
  } @else {
    @return $color;
  }
}

// generate palette maps
//
// @return maps
@function generate-palette() {
  $p: ();
  @each $k, $m in $palette-colors {
    $p: map-merge($p, $m);
  }
  @return $p;
}

// get color map
//
// @param  string $name
// @return maps
@function palette-get-color($name) {
  @return map-get($palette-colors, $name);
}

// mix two colors
//
// @param string $name1
// @param string $name2
// @param number $weight  $name1 <- 0 ~ 100 -> $name2
// @return color
@function palette-mix($name1, $name2, $weight: 50%) {
  @return mix(palette($name1), palette($name2), $weight);
}

//==========================================================
// Color Functions
//==========================================================

// Get brightness of color.
// @link   https://www.w3.org/TR/AERT#color-contrast
//
// @param  color $color
// @return int   0~255
@function brightness($color) {
  @return ((red($color) * 299) + (green($color) * 587) + (blue($color) * 114)) / 1000;
}

// get contrast color
//
// @param  color  $color
// @param  color  $dark
// @param  color  $light
// @return color  $dark or $light
@function get-contrast-color($color, $dark: #000, $light: #fff) {
  // contrast point = 166 (65%, #a6a6a6)
  @if (brightness($color) > $palette-brightness-point) {
    @return $dark; // Lighter background, return dark color
  } @else {
    @return $light; // Darker background, return light color
  }
}

// Convert RGBA color to RGB color
// @link https://makandracards.com/makandra/42500-sass-how-to-convert-an-rgba-color-to-its-rgb-look-alike
//
// @param {Color} $rgba  RGBA color
// @param {Color} $base  background base color
// @return {Color} RGB color
@function rgba-to-rgb($rgba, $base: #fff) {
  @return mix(rgb(red($rgba), green($rgba), blue($rgba)), $base, alpha($rgba) * 100%);
}

// Makes a color weaker. If color is light, then color to darker.
//
// @param  {Color}  $color
// @param  {Number} $amount 0%-100%
// @return {Color}
@function weaken($color, $amount) {
  @if (brightness($color) > $palette-brightness-point) {
    @return darken($color, $amount);
  } @else {
    @return lighten($color, $amount);
  }
}

// Makes a color stronger. If color is dark, then color to more darker.
//
// @param  {Color}  $color
// @param  {Number} $amount 0%-100%
// @return {Color}
@function strongen($color, $amount) {
  @if (brightness($color) > $palette-brightness-point) {
    @return lighten($color, $amount);
  } @else {
    @return darken($color, $amount);
  }
}

//==========================================================
// Helper functions
//==========================================================

// Remove the unit of a length
//
// @param  number $number Number to remove unit from
// @return number Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
